<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, shrink-to-fit=no, initial-scale=1" />
    <meta name="description" content="" />
    <meta name="Deepak Rapolu" content="" />
    <!-- bower:css -->
    <link rel="stylesheet" href="bower_components/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="bower_components/c3/c3.css" />
    <link rel="stylesheet" href="bower_components/jqTree/jqtree.css" />
    <!-- endbower -->

    <!-- bower:js -->
    <script src="bower_components/jquery/dist/jquery.js"></script>
    <script src="bower_components/bootstrap/dist/js/bootstrap.js"></script>
    <!--<script src="https://d3js.org/d3.v4.min.js"></script>-->
    <script src="bower_components/d3/d3.js"></script>
    <script src="bower_components/c3/c3.js"></script>
    <script src="bower_components/jqTree/tree.jquery.js"></script>
    <script src="bower_components/matchHeight/dist/jquery.matchHeight.js"></script>
    <script src="bower_components/underscore/underscore.js"></script>
    <!-- endbower -->
    <!-- inject:css -->

    <link rel="stylesheet" href="css/custom.css"/>
    <!-- endinject -->
    <style>

svg {
  font: 10px sans-serif;
}

</style></head>
<body>
<div class="container-fluid" >
    <div class="row">
        <div class="col-md-2 removeCol-md-3-padding" >
            <a href="/" style="text-decoration:none">
                <div class="card box" style="text-align:center">
                <img class="card-img-top logoPadding" src="img/mashreq.png" alt="LOGO"/>
                <h5 class="header">Operational Analytics</h5>
            </div>
            </a>
            <div class="card box2" class="side-bar">
                <div class="card-img-top" class="side-bar">
                    <div id="retailTree" class="treeHeight "></div>
                </div>
            </div>
        </div>
        <div class="col-md-10 paddingForMobile">
            <div>
                <div class="card vertical-center box">
                    <div class="col-md-4 col-md-offset-4 h3">
                        Retail Analytics Dashboard
                    </div>
                    <div class="col-md-4">
                        <span class="h4 pull-right">Santosh</span>
                    </div>
                </div>
            </div>
            <div>
                <div class="card box2">
                    <ul class="bread-crumb">
                        <li><a href="#">Retail</a></li>
                        <li><a href="#">CASA</a></li>
                        <li><a href="#">Productivity</a></li>
                        <li><a href="/">Employees</a></li>
                    </ul>
                    <div class="header-bar">
                        <h4>CASA PRODUCTIVITY</h4>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="tile" style="background-color:#00b0f0;height:auto">
                                <div class="h4" style="text-align:center;margin-top:0px;margin-bottom:0px">Avg Productivity</div>
                                <div class="h3" style="text-align:center;margin-top:5px;margin-bottom:0px">78%</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="tile" style="background-color:#39cccc;height:auto">
                                <div class="h4" style="text-align:center;margin-top:0px;margin-bottom:0px">Total Applications Processed</div>
                                <div class="h3" style="text-align:center;margin-top:5px;margin-bottom:0px">480</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="tile" style="background-color:#ffc000;height:auto">
                                <div class="h4" style="text-align:center;margin-top:0px;margin-bottom:0px">Total Team Size</div>
                                <div class="h3" style="text-align:center;margin-top:5px;margin-bottom:0px">32</div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div id="treemap" class="col-md-12" style="margin-left:20px">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
var margin = {top: 20, right: 0, bottom: 0, left: 0},
    width = 960,
    height = 500 - margin.top - margin.bottom,
    formatNumber = d3.format(",d"),
    transitioning;

var x = d3.scale.linear()
    .domain([0, width])
    .range([0, width]);

var y = d3.scale.linear()
    .domain([0, height])
    .range([0, height]);

var treemap = d3.layout.treemap()
    .children(function(d, depth) { return depth ? null : d._children; })
    .sort(function(a, b) { return a.value - b.value; })
    .ratio(height / width * 0.5 * (1 + Math.sqrt(5)))
    .round(false);

var svg = d3.select("#treemap").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.bottom + margin.top)
    .style("margin-left", -margin.left + "px")
    .style("margin.right", -margin.right + "px")
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
    .style("shape-rendering", "crispEdges");

var grandparent = svg.append("g")
    .attr("class", "grandparent");

grandparent.append("rect")
    .attr("y", -margin.top)
    .attr("width", width)
    .attr("height", margin.top);

grandparent.append("text")
    .attr("x", 6)
    .attr("y", 6 - margin.top)
    .attr("dy", ".75em");

d3.json("flare_hierarchy.json", function(root) {
  initialize(root);
  accumulate(root);
  layout(root);
  display(root);

  function initialize(root) {
    root.x = root.y = 0;
    root.dx = width;
    root.dy = height;
    root.depth = 0;
  }

  // Aggregate the values for internal nodes. This is normally done by the
  // treemap layout, but not here because of our custom implementation.
  // We also take a snapshot of the original children (_children) to avoid
  // the children being overwritten when when layout is computed.
  function accumulate(d) {
    return (d._children = d.children)
        ? d.value = d.children.reduce(function(p, v) { return p + accumulate(v); }, 0)
        : d.value;
  }

  // Compute the treemap layout recursively such that each group of siblings
  // uses the same size (1×1) rather than the dimensions of the parent cell.
  // This optimizes the layout for the current zoom state. Note that a wrapper
  // object is created for the parent node for each group of siblings so that
  // the parent’s dimensions are not discarded as we recurse. Since each group
  // of sibling was laid out in 1×1, we must rescale to fit using absolute
  // coordinates. This lets us use a viewport to zoom.
  function layout(d) {
    if (d._children) {
      treemap.nodes({_children: d._children});
      d._children.forEach(function(c) {
        c.x = d.x + c.x * d.dx;
        c.y = d.y + c.y * d.dy;
        c.dx *= d.dx;
        c.dy *= d.dy;
        c.parent = d;
        layout(c);
      });
    }
  }

  function display(d) {
    grandparent
        .datum(d.parent)
        .on("click", transition)
      .select("text")
        .text(name(d));

    var g1 = svg.insert("g", ".grandparent")
        .datum(d)
        .attr("class", "depth");

    var g = g1.selectAll("g")
        .data(d._children)
      .enter().append("g");

    g.filter(function(d) { return d._children; })
        .classed("children", true)
        .on("click", transition);

    g.selectAll(".child")
        .data(function(d) { return d._children || [d]; })
      .enter().append("rect")
        .attr("class", "child")
        .call(rect);

    g.append("rect")
        .attr("class", "parent")
        .call(rect)
      .append("title")
        .text(function(d) { return formatNumber(d.value); });

    g.append("text")
        .attr("dy", ".75em")
        .text(function(d) { return d.name; })
        .call(text);

    function transition(d) {
      if (transitioning || !d) return;
      transitioning = true;

      var g2 = display(d),
          t1 = g1.transition().duration(750),
          t2 = g2.transition().duration(750);

      // Update the domain only after entering new elements.
      x.domain([d.x, d.x + d.dx]);
      y.domain([d.y, d.y + d.dy]);

      // Enable anti-aliasing during the transition.
      svg.style("shape-rendering", null);

      // Draw child nodes on top of parent nodes.
      svg.selectAll(".depth").sort(function(a, b) { return a.depth - b.depth; });

      // Fade-in entering text.
      g2.selectAll("text").style("fill-opacity", 0);

      // Transition to the new view.
      t1.selectAll("text").call(text).style("fill-opacity", 0);
      t2.selectAll("text").call(text).style("fill-opacity", 1);
      t1.selectAll("rect").call(rect);
      t2.selectAll("rect").call(rect);

      // Remove the old node when the transition is finished.
      t1.remove().each("end", function() {
        svg.style("shape-rendering", "crispEdges");
        transitioning = false;
      });
    }

    return g;
  }

  function text(text) {
    text.attr("x", function(d) { return x(d.x) + 6; })
        .attr("y", function(d) { return y(d.y) + 6; });
  }

  function rect(rect) {
    rect.attr("x", function(d) { return x(d.x); })
        .attr("y", function(d) { return y(d.y); })
        .attr("width", function(d) { return x(d.x + d.dx) - x(d.x); })
        .attr("height", function(d) { return y(d.y + d.dy) - y(d.y); });
  }

  function name(d) {
    return d.parent
        ? name(d.parent) + "." + d.name
        : d.name;
  }
});

</script>
<script src="js/app.js"></script>
</body>
</html>